#!/usr/bin/env groovy  
import hudson.model.*
import hudson.EnvVars
import groovy.json.JsonSlurperClassic
import groovy.json.JsonBuilder
import groovy.json.JsonOutput
import java.net.URL
/* Only keep the 10 most recent builds. */
properties([[$class: 'BuildDiscarderProperty',
             strategy: [$class: 'LogRotator', numToKeepStr: '5']]])
 node('Linux') {
    
       try {
	   stage('Environment') {
		if (isUnix()) {
			withCredentials([string(credentialsId: 'servicenow', variable: 'servicenow')]) {
				sh 'return=$(curl "https://cognizantcatalyst.service-now.com/api/cogz/pipeline_deployment_metric" --request POST --header "Accept:application/json" --header "Content-Type:application/json" --data "{\\"id\\": \\"$ServiceNowID\\", \\"comments\\": \\"Started Jenkins $app_name application deployment with version $app_version on $env_name environment\\",\\"state\\": \\"Work in Progress\\",\\"jenkinsConsoleURL\\":\\"$BUILD_URL/console\\"}" --user "202890":"$servicenow" 2>/dev/null|cut -d":" -f3|cut -d"\\"" -f2)' 
			 	hygieiaDeployPublishStep applicationName: "$app_name", artifactDirectory: 'build/libs/', artifactGroup: '$group_id', artifactName: '*.war', artifactVersion: '$app_version', buildStatus: 'InProgress', environmentName: '$env_name'        
				withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'AWS', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) 
				{      
						checkout([$class: 'GitSCM', branches: [[name: "*/master"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'c7e60db1-4689-46b7-92dc-1cd7ffcc3f16', url: 'git@github.com:chaitu-papa/ansible-aws-playbooks.git']]])         
						ansiblePlaybook credentialsId: '14bd8691-b88a-427a-8488-cf28846b9820', installation: 'ansible', extras: '--extra-vars="app_version=$app_version" --extra-vars="dns_name=$dns_name" --extra-vars="alias_hosted_zone_id=$alias_hosted_zone_id" --extra-vars="env_name=$env_name" --extra-vars="min_instances=$min_instances" --extra-vars="max_instances=$max_instances" --extra-vars="cf_sg_group=$cf_sg_group" --extra-vars="AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" --extra-vars="AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" --extra-vars="app_name=$app_name" --extra-vars="env_name=$env_name" --extra-vars="cf_subnet=$cf_subnet"  --extra-vars="hosted_zone=$hosted_zone" --extra-vars="InstanceType=$infra_type"', playbook: 'cf-aws.yml', sudoUser: null
						hygieiaDeployPublishStep applicationName: "$app_name", artifactDirectory: 'build/libs/', artifactGroup: '$group_id', artifactName: '*.war', artifactVersion: '$app_version', buildStatus: 'SUCCESS', environmentName: '$env_name'        
						if ( "$env_name" != "UAT" ){			 
							sh 'return=$(curl "https://cognizantcatalyst.service-now.com/api/cogz/pipeline_deployment_metric" --request POST --header "Accept:application/json" --header "Content-Type:application/json" --data "{\\"id\\": \\"$ServiceNowID\\", \\"comments\\": \\"Deployment completed successfully on $env_name environment\\",\\"state\\": \\"Processed\\"}" --user "202890":"$servicenow" 2>/dev/null|cut -d":" -f3|cut -d"\\"" -f2)' 
						}
						else {			
							sh 'return=$(curl "https://cognizantcatalyst.service-now.com/api/cogz/pipeline_deployment_metric" --request POST --header "Accept:application/json" --header "Content-Type:application/json" --data "{\\"id\\": \\"$ServiceNowID\\", \\"comments\\": \\"Deployment completed successfully on $env_name environment\\"}" --user "202890":"$servicenow" 2>/dev/null|cut -d":" -f3|cut -d"\\"" -f2)' 
						}
				}
			} // Servicenow credentials	
		} 
	 } // /Stage Environment 		
 
     stage('Load Test') {
       if (isUnix()) {
     	if ( "$env_name" == "UAT" ) {
				withCredentials([string(credentialsId: 'servicenow', variable: 'servicenow')]) {
					sh 'return=$(curl "https://cognizantcatalyst.service-now.com/api/cogz/pipeline_deployment_metric" --request POST --header "Accept:application/json" --header "Content-Type:application/json" --data "{\\"id\\": \\"$ServiceNowID\\", \\"comments\\": \\" Performance testing started on $env_name environment for $app_name application with version $app_version \\"}" --user "202890":"$servicenow" 2>/dev/null|cut -d":" -f3|cut -d"\\"" -f2)'
					build job: 'jmeter-pipeline', parameters: [string(name: 'env_name', value: 'UAT')]
					sh 'return=$(curl "https://cognizantcatalyst.service-now.com/api/cogz/pipeline_deployment_metric" --request POST --header "Accept:application/json" --header "Content-Type:application/json" --data "{\\"id\\": \\"$ServiceNowID\\", \\"comments\\": \\" Performance test completed successfully on $env_name environment \\",\\"state\\": \\"Processed\\"}" --user "202890":"$servicenow" 2>/dev/null|cut -d":" -f3|cut -d"\\"" -f2)' 
				} // Servicenow credentials	
		} 
          }  } // Stage Load Test
}  // try
    
catch (exc) {
    echo "Caught: ${exc}"
	currentBuild.result = "FAILURE"
	withCredentials([string(credentialsId: 'servicenow', variable: 'servicenow')]) {
		sh 'return=$(curl "https://cognizantcatalyst.service-now.com/api/cogz/pipeline_deployment_metric" --request POST --header "Accept:application/json" --header "Content-Type:application/json" --data "{\\"id\\": \\"$ServiceNowID\\", \\"comments\\": \\"Deployment Failed on $env_name environment\\",\\"state\\": \\"Failed\\"}" --user "202890":"123" 2>/dev/null|cut -d":" -f3|cut -d"\\"" -f2)' 
	}
	/* Rethrow to fail the Pipeline properly */
    throw exc
}
}  //node
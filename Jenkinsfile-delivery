#!/usr/bin/env groovy  
import hudson.model.*
import hudson.EnvVars
import groovy.json.JsonSlurperClassic
import groovy.json.JsonBuilder
import groovy.json.JsonOutput
import java.net.URL
/* Only keep the 10 most recent builds. */

properties([[$class: 'BuildDiscarderProperty',
             strategy: [$class: 'LogRotator', numToKeepStr: '5']]])
 node('Linux') {
		cleanWs() 
       try {		
				
	   stage('Environment') {
		if (isUnix()) {
			withCredentials([string(credentialsId: 'servicenow', variable: 'servicenow')]) {
				def serviceid = sh(script: 'curl "https://cognizantcatalyst.service-now.com/api/cogz/devops_request_details" --request POST --header "Accept:application/json" --header "Content-Type:application/json" --data "{\\"sysId\\": \\"$ServiceNowID\\"}" --user "202890":"$servicenow" 2>/dev/null|cut -d":" -f3|cut -d"\\"" -f2', returnStdout: true)
				println "ServiceNow Requested Item: " +serviceid.trim()
		
				def ret0 = sh(script: 'curl "https://cognizantcatalyst.service-now.com/api/cogz/pipeline_deployment_metric" --request POST --header "Accept:application/json" --header "Content-Type:application/json" --data "{\\"id\\": \\"$ServiceNowID\\", \\"comments\\": \\"Started Jenkins $app_name application deployment with version $app_version on $env_name environment\\",\\"state\\": \\"AWS Environment Build and Deployment in Progress\\",\\"jenkinsConsoleURL\\":\\"$BUILD_URL/console\\"}" --user "202890":"$servicenow" 2>/dev/null|cut -d":" -f3|cut -d"\\"" -f2', returnStdout: true)
				if ( ret0.trim() == "success" ) {
					println ret0
				} else {
					 println "failed"
						 currentBuild.result = "FAILURE"
						 error "Unable to update ServiceNow Request aborting Request"						 
					}
				withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'AWS', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) 
				{      
						checkout([$class: 'GitSCM', branches: [[name: "*/master"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'c7e60db1-4689-46b7-92dc-1cd7ffcc3f16', url: 'git@github.com:chaitu-papa/ansible-aws-playbooks.git']]])         
						sh 'mkdir -p build/libs'
						sh 'wget -o build/libs/spring-petclinic.war http://34.196.120.121:8081/nexus/service/local/artifact/maven/redirect?r=snapshots/&g=org.springframework.samples/&a=spring-petclinic/&v=1.0-SNAPSHOT/&p=war'
						hygieiaDeployPublishStep applicationName: "$app_name", artifactDirectory: 'build/libs/', artifactGroup: '$group_id', artifactName: '*.war', artifactVersion: '$app_version', buildStatus: 'InProgress', environmentName: '$env_name'        
						ansiblePlaybook credentialsId: '14bd8691-b88a-427a-8488-cf28846b9820', installation: 'ansible', extras: '--extra-vars="app_version=$app_version" --extra-vars="dns_name=$dns_name" --extra-vars="alias_hosted_zone_id=$alias_hosted_zone_id" --extra-vars="env_name=$env_name" --extra-vars="min_instances=$min_instances" --extra-vars="max_instances=$max_instances" --extra-vars="cf_sg_group=$cf_sg_group" --extra-vars="AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" --extra-vars="AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" --extra-vars="app_name=$app_name" --extra-vars="env_name=$env_name" --extra-vars="cf_subnet=$cf_subnet"  --extra-vars="hosted_zone=$hosted_zone" --extra-vars="InstanceType=$infra_type"', playbook: 'cf-aws.yml', sudoUser: null
						hygieiaDeployPublishStep applicationName: "$app_name", artifactDirectory: 'build/libs/', artifactGroup: '$group_id', artifactName: '*.war', artifactVersion: '$app_version', buildStatus: 'SUCCESS', environmentName: '$env_name'     
				}
				def ret1 = sh(script: 'curl "https://cognizantcatalyst.service-now.com/api/cogz/pipeline_deployment_metric" --request POST --header "Accept:application/json" --header "Content-Type:application/json" --data "{\\"id\\": \\"$ServiceNowID\\", \\"comments\\": \\"Deployment completed successfully on $env_name environment\\"}" --user "202890":"$servicenow" 2>/dev/null|cut -d":" -f3|cut -d"\\"" -f2', returnStdout: true)
					if ( ret1.trim() == "success" ) {
							println ret1
					} else {
							println "failed"
							currentBuild.result = "FAILURE"
							error "Unable to update ServiceNow Request aborting Request"									 
								}		
					
			} // Servicenow credentials	
		} 
	 } // /Stage Environment 		
 
     stage('Load Test') {
       if (isUnix()) {
     	if ( "$env_name" == "UAT" ) {
				
				withCredentials([string(credentialsId: 'servicenow', variable: 'servicenow')]) {
					def ret3 = sh(script: 'curl "https://cognizantcatalyst.service-now.com/api/cogz/pipeline_deployment_metric" --request POST --header "Accept:application/json" --header "Content-Type:application/json" --data "{\\"id\\": \\"$ServiceNowID\\", \\"comments\\": \\" Performance testing started on $env_name environment for $app_name application with version $app_version \\",\\"state\\": \\"Testing in Progress\\"}" --user "202890":"$servicenow" 2>/dev/null|cut -d":" -f3|cut -d"\\"" -f2', returnStdout: true)
					if ( ret3.trim() == "success" ) {
									println ret3
								} else {
									println "failed"
									currentBuild.result = "FAILURE"
									error "Unable to update ServiceNow Request aborting Request"									 
								}
					// build job: 'jmeter-pipeline', parameters: [string(name: 'env_name', value: 'UAT')]
					
					
					checkout([$class: 'GitSCM', branches: [[name: "*/sn-master"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'c7e60db1-4689-46b7-92dc-1cd7ffcc3f16', url: 'git@github.com:chaitu-papa/petclinic.git']]])
					sh "/home/ec2-user/apache-jmeter-3.3/bin/jmeter.sh -n -t src/test/jmeter/petclinic_test_plan.jmx -l report.jtl -e -o test-out -Jjmeter.save.saveservice.output_format=csv"
					perfReport modePerformancePerTestCase: true, modeThroughput: true, sourceDataFiles: 'report.jtl'
					
					
					// hygieiaTestPublishStep buildStatus: 'Success', testApplicationName: 'SpringPetClinic', testEnvironmentName: 'UAT', testFileNamePattern: 'report.jtl', testResultsDirectory: '.', testType: 'Regression'
		  
					def ret4 = sh(script: 'curl "https://cognizantcatalyst.service-now.com/api/cogz/pipeline_deployment_metric" --request POST --header "Accept:application/json" --header "Content-Type:application/json" --data "{\\"id\\": \\"$ServiceNowID\\", \\"comments\\": \\" Performance test completed successfully on $env_name environment \\"}" --user "202890":"$servicenow" 2>/dev/null|cut -d":" -f3|cut -d"\\"" -f2', returnStdout: true) 
					if ( ret4.trim() == "success" ) {
									println ret4
								} else {
									println "failed"
									currentBuild.result = "FAILURE"
									error "Unable to update ServiceNow Request aborting Request"									 
								}
				} // Servicenow credentials	
		} // UAT environment          
		  	withCredentials([string(credentialsId: 'servicenow', variable: 'servicenow')]) {
			def ret6 = sh(script: 'curl "https://cognizantcatalyst.service-now.com/api/cogz/pipeline_deployment_metric" --request POST --header "Accept:application/json" --header "Content-Type:application/json" --data "{\\"id\\": \\"$ServiceNowID\\", \\"comments\\": \\" AWS Environment Build,Deployment and Completed successfully on $env_name environment \\",\\"state\\": \\"Complete\\"}" --user "202890":"$servicenow" 2>/dev/null|cut -d":" -f3|cut -d"\\"" -f2', returnStdout: true) 
					if ( ret6.trim() == "success" ) {
							println ret6
					} else {
							println "failed"
							currentBuild.result = "FAILURE"
							error "Unable to update ServiceNow Request aborting Request"									 
					}
				}
		  }  // Is Unix
		  	  
		  } // Stage Load Test
}  // try
    
catch (exc) {
    echo "Caught: ${exc}"	
	currentBuild.result = "FAILURE"	
	withCredentials([string(credentialsId: 'servicenow', variable: 'servicenow')]) {
		def ret5 = sh(script: 'curl "https://cognizantcatalyst.service-now.com/api/cogz/pipeline_deployment_metric" --request POST --header "Accept:application/json" --header "Content-Type:application/json" --data "{\\"id\\": \\"$ServiceNowID\\", \\"comments\\": \\"ServiceNow Request Failed on $env_name environment\\",\\"state\\": \\"Failed\\"}" --user "202890":"123" 2>/dev/null|cut -d":" -f3|cut -d"\\"" -f2', returnStdout: true)  
		if ( ret5.trim() == "success" ) {
					println ret5
			} else {
					println "failed"						
					error "Unable to update ServiceNow Request aborting Request"									 
				}
	}
	/* Re throw to fail the Pipeline properly */
    throw exc
} // catch
finally {
    println 'finally'

	} //Finally
}  //node